package secarma;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Frame;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.filechooser.FileSystemView;
import org.python.util.PythonInterpreter;

/**
 *
 * @author cornerpirate
 */
public class ExtenderForgeGui extends javax.swing.JPanel {

    /**
     * Creates new form CustomDecoderGui
     */
    public ExtenderForgeGui() {
        initComponents();

        // When Jython first starts you get a debugging error
        // Spat out to STDERR you get an "UnsupportedCharsetException".
        // Looking into it the answer is so supply a java -D input
        // Since we are not in control of how people run burp I am doing
        // this hack. Launch the interpreter BEFORE redirecting errors/
        //PythonInterpreter interp = new PythonInterpreter();
        //interp.exec("a=1+2");
        //interp.close();
        System.setProperty("python.console.encoding", "UTF-8");

        // Redirect standard out and err to the pythonOutput textpane
        MessageConsole console = new MessageConsole(this.output);
        console.redirectOut();
        console.redirectErr(Color.RED, null);
        // TODO investigate this http://www.jython.org/javadoc/org/python/util/PythonInterpreter.html
        // Maybe I can use setErr and setOut instead of STDERR and STDOUT

        setupTabs();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TopSplit = new javax.swing.JSplitPane();
        NorthPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        SaveButton = new javax.swing.JButton();
        EnableButton = new javax.swing.JButton();
        ExecutePythonButton = new javax.swing.JButton();
        BottomSplit = new javax.swing.JSplitPane();
        MiddlePanelTabbedPane = new javax.swing.JTabbedPane();
        SouthPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextPane();

        setLayout(new java.awt.BorderLayout());

        TopSplit.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        NorthPanel.setLayout(new java.awt.BorderLayout());

        SaveButton.setText("Save");
        SaveButton.setToolTipText("This will save your python extender so you can use it permanently");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        EnableButton.setText("Enable Temporarily");
        EnableButton.setToolTipText("This will enable your extender until burp closes. ");
        EnableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnableButtonActionPerformed(evt);
            }
        });

        ExecutePythonButton.setText("Execute");
        ExecutePythonButton.setToolTipText("If you just need to run python here is your button to do that.");
        ExecutePythonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExecutePythonButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(ExecutePythonButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 579, Short.MAX_VALUE)
                .addComponent(EnableButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SaveButton))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SaveButton)
                    .addComponent(EnableButton)
                    .addComponent(ExecutePythonButton)))
        );

        NorthPanel.add(jPanel2, java.awt.BorderLayout.NORTH);

        TopSplit.setLeftComponent(NorthPanel);

        BottomSplit.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        MiddlePanelTabbedPane.setPreferredSize(new java.awt.Dimension(865, 500));
        MiddlePanelTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                MiddlePanelTabbedPaneStateChanged(evt);
            }
        });
        BottomSplit.setLeftComponent(MiddlePanelTabbedPane);

        SouthPanel.setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Output Text");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(787, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        SouthPanel.add(jPanel3, java.awt.BorderLayout.NORTH);

        jScrollPane1.setViewportView(output);

        SouthPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        BottomSplit.setRightComponent(SouthPanel);

        TopSplit.setRightComponent(BottomSplit);

        add(TopSplit, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Return the Frame with the title "Burp Suite".
     * @return 
     */
    public Frame getBurpFrame() {
        Frame[] frames = Frame.getFrames();
        for(int i=0; i<= frames.length-1; i++) {
            Frame f = frames[i];
            if(f.getTitle().contains("Burp Suite")) {
                return f;
            }
        }
        return null;
    }

    /**
     * Save the current file for future re-use.
     *
     * @param evt
     */
    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed

        // Get the python code the person wants to save
        PythonTab pt = (PythonTab) MiddlePanelTabbedPane.getSelectedComponent();
        String python = pt.python.getText();

        // Prompt user for save file location, with confirm if it already exists
        JFileChooser jfc = new JFileChooser();
        //int returnValue = jfc.showSaveDialog(getBurpFrame());
        
        // Make sure that the save dialog opens on the same monitor as Burp
        int returnValue = jfc.showSaveDialog(this.SaveButton.getParent());
        
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = jfc.getSelectedFile();
            // Check if the file exists
            if (selectedFile.exists()) {
                // File did exist so prompt for overwrite.
                int response = JOptionPane.showConfirmDialog(null, "File Exists, do you want to overwrite it?", "Confirm",
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (response == JOptionPane.YES_OPTION) {
                    // Save File becaise they confirmed it
                    writeFile(python, selectedFile);
                }
            } else {
                // File did not exist so write it.
                writeFile(python, selectedFile);
            }
        }

    }//GEN-LAST:event_SaveButtonActionPerformed

    /**
     * Writes the Python out to your file.
     *
     * @param python
     * @param outfile
     */
    public void writeFile(String python, File outfile) {

        try {

            BufferedWriter out = new BufferedWriter(new FileWriter(outfile));
            out.write(python);
            out.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * *
     * This installs an Extender temporarily into Burp. This is a bit of a
     * "hack" Since I did not spot part of the API where I could easily generate
     * a new Callbacks object. What it does is piggy back on the ExtenderForge
     * callbacks. Which is not ideal but seems to allow the Extenders to work
     * short term.
     *
     * @param evt
     */
    private void EnableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnableButtonActionPerformed

        //Clear the output text.
        output.setText("");

        PythonTab pt = (PythonTab) MiddlePanelTabbedPane.getSelectedComponent();
        String python = pt.python.getText();

        // Show user that something is happening
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        PythonInterpreter interp = new PythonInterpreter();

        // Make an instantiated callbacks object available within the python script
        interp.set("cbacks", ExtenderForge.callbacks);
        // Ideally generating new callbacks would be good

        // Run the user python in the Jython interpreter.
        interp.exec(python);

        // Do this to register the burp extender!
        interp.exec("BurpExtender.registerExtenderCallbacks(BurpExtender(), cbacks)");

        interp.close();

        // Now our task is over show the user it is done.
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

    }//GEN-LAST:event_EnableButtonActionPerformed

    /**
     * When this is called get the python in the current tab and run it. This is
     * not installing an Extender just letting users test Python code.
     *
     * @param evt
     */
    private void ExecutePythonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExecutePythonButtonActionPerformed

        //Clear the output text.
        output.setText("");

        PythonTab pt = (PythonTab) MiddlePanelTabbedPane.getSelectedComponent();
        String python = pt.python.getText();

        // Show user that something is happening
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        PythonInterpreter interp = new PythonInterpreter();

        // Run the user python in the Jython interpreter.
        interp.exec(python);
        interp.close();

        // Now our task is over show the user it is done.
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_ExecutePythonButtonActionPerformed

    /**
     * *
     * When the tabs change this controls if the Execute Button is enabled.
     *
     * @param evt
     */
    private void MiddlePanelTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_MiddlePanelTabbedPaneStateChanged

        JTabbedPane sourceTabbedPane = (JTabbedPane) evt.getSource();
        int index = sourceTabbedPane.getSelectedIndex(); // get the index
        // Flip the butons on and off based on whether this is python mode or not.
        ExecutePythonButton.setEnabled(sourceTabbedPane.getTitleAt(index).equalsIgnoreCase("Python"));
        EnableButton.setEnabled(!sourceTabbedPane.getTitleAt(index).equalsIgnoreCase("Python"));
    }//GEN-LAST:event_MiddlePanelTabbedPaneStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane BottomSplit;
    private javax.swing.JButton EnableButton;
    private javax.swing.JButton ExecutePythonButton;
    private javax.swing.JTabbedPane MiddlePanelTabbedPane;
    private javax.swing.JPanel NorthPanel;
    private javax.swing.JButton SaveButton;
    private javax.swing.JPanel SouthPanel;
    private javax.swing.JSplitPane TopSplit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTextPane output;
    // End of variables declaration//GEN-END:variables

    /**
     *
     * @param filename
     */
    private void readFileFromJar(String filename) {

        InputStream is = getClass().getResourceAsStream(filename);
        InputStreamReader isr = new InputStreamReader(is);
        BufferedReader br = new BufferedReader(isr);

        StringBuffer stringBuffer = new StringBuffer();
        String line = null;

        try {

            while ((line = br.readLine()) != null) {
                stringBuffer.append(line).append("\n");
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }

        // Get file name 
        String name = new File(filename).getName();
        int pos = name.lastIndexOf(".");
        if (pos > 0) {
            name = name.substring(0, pos);
        }

        PythonTab pt = new PythonTab(stringBuffer.toString());
        MiddlePanelTabbedPane.addTab(name, pt);

    }

    private void setupTabs() {

        // List of template files. 
        ArrayList<String> templates = new ArrayList();
        templates.add("/templates/Python.py");
        templates.add("/templates/IIntruderPayloadProcessor.py");
        templates.add("/templates/IntruderPayloads.py");
        templates.add("/templates/CustomEditorTab.py");

        for (String t : templates) {
            //System.out.println(t);
            readFileFromJar(t);
        }

    }
}
